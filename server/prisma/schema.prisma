// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  firstName         String
  lastName          String
  email             String       @unique
  imageUrl          String
  locationName      String       @default("Berlin")
  latitude          Float        @default(52.52437)
  longitude         Float        @default(13.41053)
  tests             Test[]
  collaboratedTests Test[]       @relation("collaborator")
  events            Event[]
  studyGroups       StudyGroup[]
  members           Member[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  CODE
}


model Test {
  id                     String       @id @default(uuid())
  title                  String
  description            String
  passCriteria           Int
  showQuestionsOnResults Boolean
  randomizeQuestions     Boolean
  randomizeAnswers       Boolean
  defaultQuestionType    QuestionType @default(MULTIPLE_CHOICE)
  createdAt              DateTime
  updatedAt              DateTime     @updatedAt
  questions              Question[]
  authorId               String
  author                 User         @relation(fields: [authorId], references: [id])
  collaborators          User[]       @relation("collaborator")
  events                 Event[]      @relation("eventTests")
  messages               Message[]
}

model Question {
  id                     String                  @id @default(uuid())
  type                   QuestionType
  question               String                  @db.VarChar(512)
  imageUrl               String?
  createdAt              DateTime                @default(now())
  testId                 String
  test                   Test                    @relation(fields: [testId], references: [id], onDelete: Cascade)
  multipleChoiceQuestion MultipleChoiceQuestion?
  codeQuestion           CodeQuestion?
}

model MultipleChoiceQuestion {
  questionId String   @id
  answers    Answer[]
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CodeQuestion {
  questionId               String   @id
  correctCode              String   @db.Text
  description              String?  @db.Text
  showCorrectCodeOnResults Boolean
  Question                 Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String                 @id @default(uuid())
  answer     String                 @db.VarChar(512)
  isCorrect  Boolean
  createdAt  DateTime               @default(now())
  questionId String
  question   MultipleChoiceQuestion @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
}

enum RepeatPattern {
  NONE
  DAILY
  WEEKLY
  MONTHLY
}

model Event {
  id            String        @id @default(uuid())
  title         String        @db.VarChar(512)
  description   String?       @db.Text
  location      String        @default("Online") @db.VarChar(128)
  start         DateTime
  end           DateTime
  allDay        Boolean
  color         String
  repeatPattern RepeatPattern @default(NONE)
  selectedTests Test[]        @relation("eventTests")
  userId        String
  user          User          @relation(fields: [userId], references: [id])
}

model StudyGroup {
  id          String    @id @default(uuid())
  name        String
  description String    @db.Text
  imageUrl    String    @db.Text
  isPublic    Boolean
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     Member[]
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
}

model Member {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyGroupId String
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  messages     Message[]

  @@index([userId])
  @@index([studyGroupId])
}

model Message {
  id           String     @id @default(uuid())
  content      String     @db.Text
  fileUrl      String?    @db.Text
  testId       String?
  test         Test?       @relation(fields: [testId], references: [id])
  memberId     String?
  member       Member?     @relation(fields: [memberId], references: [id])
  studyGroupId String
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  deleted      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([studyGroupId])
  @@index([memberId])
}
